// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Run `npx prisma migrate dev` to migrate your database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models

model User {
  id              String       @id @default(uuid()) @db.Uuid
  name            String
  email           String       @unique
  password        String
  role            UserRole
  createdCourses  Course[]     @relation("CreatedCourses")
  enrolledCourses Course[]     @relation("EnrolledCourses")
  submissions     Submission[]
}

model Course {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String
  teacher     User      @relation("CreatedCourses", fields: [teacherId], references: [id])
  teacherId   String    @db.Uuid
  students    User[]    @relation("EnrolledCourses")
  chapters    Chapter[]
}

model Chapter {
  id                 String              @id @default(uuid()) @db.Uuid
  name               String
  learningOutcomes   String[]
  course             Course              @relation(fields: [courseId], references: [id])
  courseId           String              @db.Uuid
  pages              Page[]
  generatedExercises GeneratedExercise[]
}

// Abstract class
model Page {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId String   @db.Uuid
  type      PageType
  createdAt DateTime @default(now())

  traditionalTextBasedLessonPage TraditionalTextBasedLessonPage?
  exercisePage                   ExercisePage?
  explorationPage                ExplorationPage?
}

// Child classes of Page

model TraditionalTextBasedLessonPage {
  id     String @id @default(uuid()) @db.Uuid
  page   Page   @relation(fields: [pageId], references: [id])
  pageId String @unique @db.Uuid

  // Additional fields specific to TraditionalTextBasedLessonPage
  content String
}

model ExercisePage {
  id     String @id @default(uuid()) @db.Uuid
  page   Page   @relation(fields: [pageId], references: [id])
  pageId String @unique @db.Uuid

  // Additional fields specific to ExercisePage - exercise instructions, code sandbox info, correct answer
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String   @unique @db.Uuid
}

model Exercise {
  id            String @id @default(uuid()) @db.Uuid
  instructions  String
  sandboxId     String
  correctAnswer String

  exercisePage      ExercisePage?
  generatedExercise GeneratedExercise?

  submissions Submission[]
}

model GeneratedExercise {
  id        String  @id @default(uuid()) @db.Uuid
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String  @db.Uuid

  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String   @unique @db.Uuid
}

model Submission {
  id                String   @id @default(uuid()) @db.Uuid
  studentAnswer     String
  generatedFeedback String?
  teacherFeedback   String?
  submittedAt       DateTime @default(now())

  student    User     @relation(fields: [studentId], references: [id])
  studentId  String   @db.Uuid
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String   @db.Uuid
}

model ExplorationPage {
  id     String @id @default(uuid()) @db.Uuid
  page   Page   @relation(fields: [pageId], references: [id])
  pageId String @unique @db.Uuid

  // Additional fields specific to ExplorationPage - exploration instructions, code sandbox info, feedback?
  instructions String
  sandboxId    String
}

// Enums

enum UserRole {
  TEACHER
  STUDENT
}

enum PageType {
  TRADITIONAL_TEXT_BASED_LESSON
  EXERCISE
  EXPLORATION
}
